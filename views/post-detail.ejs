<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= post.title %></title>
    <link rel="stylesheet" href="/post-detail.css">
    <link rel="stylesheet" href="/header.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body>
    <%- include('header', {user: user}) %>
    <main>
        <h3 class="title"><%= post.title %></h3>
        <div class="detail-container">
            <div class="username"><%= post.username %></div>
            <div class="date"><%= post.created_at %></div>
        </div>
        <div class="content">
            <pre><%= post.content %></pre>
            <% if (images !== []) { %>
                <% images.forEach(image => { %>
                    <img src="<%= image.url %>" alt="Image">
                <% }) %>
            <% } %>
        </div>
        
        <form class="like-btn-container">
            <button class="like-btn" id="like-btn" data-postid="<%= post.id %>">
                <% if (isLiked) { %>
                    <i class="fa-solid fa-heart"></i>
                <%} else { %>
                    <i class="fa-regular fa-heart"></i>
                <% } %>
            </button>
            <div id="like-count"><%= likeCount %></div>
        </form>
        
    </main>
    <div class="comments-container" id="comments-container">
        <% comments.forEach(comment => { %>
            <div class="comment">
                <div class="username-closeBtn">
                    <div><%= comment.username %></div>
                    <% if (user.id === comment.user_id || user.is_admin) { %>
                        <button type="submit" class="delete-comment-btn" data-id="<%= comment.id %>">X</button>
                    <% } %>
                </div>
                <pre><%= comment.content %></pre>
                <div><%= format(new Date(comment.created_at), "yyyy.MM.dd HH:mm:ss") %></div>
            </div>
        <% }) %>
    </div>
    <form class="comment-container">
        <textarea name="content" id="comment-input" placeholder="댓글을 입력하세요."></textarea>
        <button type="submit" id="register-btn">등록</button>
    </form>
    <!-- <form class="reply-container">
        <textarea name="content" id="reply-input" placeholder="댓글을 입력하세요."></textarea>
        <button type="submit" id="reply-btn">등록</button>
    </form> -->
    <div class="btn-container">
        <a href="/" class="back-to-main-btn">목록</a>
        <!-- 포스트 작성자나 어드민 유저만 포스트 수정&삭제 가능 -->
        <% if (user.id === post.author || user.is_admin) { %>
            <a href="/post/<%= post.id %>/edit" class="edit-btn">수정</a>
            <form action="/post/<%= post.id %>/delete" method="post">
                <button class="delete-btn" onclick="return confirm('게시글을 삭제하시겠습니까?')">삭제</button>
            </form>
        <% } %>
    </div>
    <script src="/header.js"></script>
    <script>
        function format(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, "0");
            const day = String(date.getDate()).padStart(2, "0");
            const hours = String(date.getHours()).padStart(2, "0");
            const minutes = String(date.getMinutes()).padStart(2, "0");
            const seconds = String(date.getSeconds()).padStart(2, "0");

            return `${year}.${month}.${day} ${hours}:${minutes}:${seconds}`;
        }
        const likeBtn = document.querySelector("#like-btn");
        const likeCountEl = document.querySelector("#like-count");
        const postId = Number(likeBtn.dataset.postid);
        const commentsContainer = document.querySelector("#comments-container");
        const registerBtn = document.querySelector("#register-btn");
        const commentInput = document.querySelector("#comment-input");

        // 하트 버튼 누를 시
        likeBtn.addEventListener("click", async (e) => {
            e.preventDefault();
            try {
                const response = await fetch(`/post/${postId}/like`, {method: "POST"});
                if (!response.ok) {
                    throw new Error("하트 누르기 에러");
                }
                const {isLiked, likeCount} = await response.json();
                if (isLiked) {
                    likeBtn.innerHTML = '<i class="fa-solid fa-heart"></i>';
                } else {
                    likeBtn.innerHTML = '<i class="fa-regular fa-heart"></i>';
                }
                likeCountEl.textContent = likeCount;
            } catch(error) {
                console.err(error);
                alert("에러가 발생했습니다. 잠시 후 다시 시도해주세요.");
            }
            
        })

        // 댓글 새로 랜더링하는 함수
        function renderComments(comments, user) {
            commentsContainer.innerHTML = comments.map(comment => {
                return `<div class="comment">
                    <div class="username-closeBtn">
                        <div>${comment.username}</div>
                        ${(user.id === comment.user_id || user.is_admin)
                        ? `<button class="delete-comment-btn" data-id=${comment.id}>X</button>`
                        : '' }
                    </div>
                    <pre>${comment.content}</pre>
                    <div>${format(new Date(comment.created_at))}</div>
                </div>`
            }).join('');
        }

        // 댓글 작성 시
        registerBtn.addEventListener("click", async(e) => {
            e.preventDefault();
            try {
                const content = commentInput.value;
                const response = await fetch(`/post/${postId}/comment/create`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({content})
                });
                if (!response.ok) {
                    throw new Error("댓글 작성 에러");
                }
                commentInput.value = '';
                const {comments, user} = await response.json();
                renderComments(comments, user);
            } catch(err) {
                console.error(err);
                alert("에러가 발생했습니다. 잠시 후 다시 시도해주세요.");
            }
            
        })

        // 댓글 삭제 시
        document.addEventListener("click", async (e) => {
            if (e.target.matches(".delete-comment-btn")) {
                e.preventDefault();
                try {
                    if (confirm("댓글을 삭제하시겠습니까?")) {
                        const commentId = Number(e.target.dataset.id);
                        const response = await fetch(`/post/${postId}/comment/${commentId}/delete`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" }
                        });
                        if (!response.ok) {
                            throw new Error("댓글 삭제 에러");
                        }
                        const {comments, user} = await response.json();
                        renderComments(comments, user);
                    }
                } catch(err) {
                    console.error(err);
                    alert("에러가 발생했습니다. 잠시 후 다시 시도해주세요.")
                }
            }
        })
    </script>
</body>
</html>